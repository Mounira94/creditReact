{"version":3,"sources":["components/images/Capture.PNG","components/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Main","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","codeChange","event","isNaN","target","value","length","setState","code","nameChange","name","toUpperCase","dateChange","state","date","slice","react_default","a","createElement","className","src","Capture","padEnd","split","map","x","i","join","alt","type","placeholder","onChange","Component","library","add","faStroopwafel","App","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cf3cc164.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Capture.df562a06.PNG\";","import React, { Component } from 'react';\r\nimport Capture from './images/Capture.PNG';\r\n\r\n\r\n\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            code: '',\r\n            name: '',\r\n            date: ''\r\n        }\r\n\r\n    }\r\n    codeChange = (event) => {\r\n        if (!isNaN(event.target.value)) {\r\n            if (event.target.value.length<=16) {\r\n                this.setState({ code: event.target.value });\r\n            }\r\n        }\r\n    }\r\n    nameChange = (event) => {    \r\n        if (isNaN(event.target.value)) {\r\n            if (event.target.value.length<20) {\r\n                this.setState({ name: event.target.value.toUpperCase() });\r\n            } \r\n        }\r\n    }\r\n    dateChange = (event) => {\r\n        if (this.state.date.length < 4) {\r\n            if ((event.target.value.slice(0, 2) < 31) && (event.target.value.slice(3, 5) < 12)) {\r\n                this.setState({ date: event.target.value });\r\n            }\r\n            else {\r\n                this.setState({ date: \"12/31\" })\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <body>\r\n                <main className=\"main\">\r\n                    <div className=\"card\">\r\n                        <div className=\"card-name\">\r\n                            <h1 className=\"name\">CREDIT CARD</h1>\r\n                        </div>\r\n                        <div className=\"card-detail\">\r\n                            <div className=\"card-detail-desc\">\r\n                                <img className=\"code-img\" src={Capture} />\r\n                                <p className=\"code-card\">{this.state.code.padEnd(16, '*').split('').map((x, i) => { return i % 4 === 0 && i > 1 ? \" \" + x : x }).join('')}</p>\r\n                                <div className=\"validity-card\">\r\n                                    <p className=\"code-validity\">5422</p>\r\n                                    <div className=\"validity\">\r\n                                        <div className=\"validity-thru\">\r\n                                            <div className=\"text-validity-thru\">\r\n                                                <span className=\"text-validity\">VALID</span>\r\n                                                <span className=\"text-validity\">THRU</span>\r\n\r\n                                            </div>\r\n                                            <i className=\"fas fa-caret-right\"></i>\r\n                                        </div>\r\n                                        <div className=\"validity-desc\">\r\n                                            <div>\r\n                                                <span className=\"text-validity\">MONTH/</span>\r\n                                                <span className=\"text-validity\">YEAR</span>\r\n                                            </div>\r\n                                            <p className=\"card-detail-type\">{this.state.date.padEnd(4, '-').split('').map((x, i) => { return i === 2 ? \"/\" + x : x }).join('')}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <p className=\"holder-text\">{this.state.name}</p>\r\n                            </div>\r\n                            <div className=\"visa-img\">\r\n                                <img className=\"card-img\" src=\"http://buy.posportal.com/media/catalog/product/cache/1/image/9df78eab33525d08d6e5fb8d27136e95/1/0/101200_1_9E9C5F0F-2AEB-1F79-7428-1CFE949B92BC_1.jpg\" alt=\"\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"inputs\">\r\n                        <input value={this.state.code} type=\"text\"  placeholder=\"CARD NUMBER\" onChange={this.codeChange} className=\"input\" />\r\n                        <input value={this.state.name} type=\"text\" placeholder=\"YOUR NAME\"  onChange={this.nameChange} className=\"input\" />\r\n                        <input value={this.state.date} type=\"text\" placeholder=\"XX/YY\" onChange={this.dateChange} className=\"input\" />\r\n                    </div>\r\n                </main>\r\n            </body>\r\n        )\r\n    }\r\n}\r\nexport default Main;","import React, { Component } from 'react';\nimport './App.css';\nimport Main from './components/Main'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStroopwafel } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faStroopwafel)\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n         <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}